import Head from 'next/head';
import Image from 'next/image';
import {
	Box,
	Button,
	ButtonGroup,
	Flex,
	Heading,
	Stack,
	Text,
	useColorModeValue,
	VStack,
} from '@chakra-ui/react';
import { AnimatePresence, motion } from 'framer-motion';
import { useEffect, useState } from 'react';
import FlashCard from '../components/FlashCard';

const tempDeck = [
	{
		term: 'function',
		definition:
			'A set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. It is a piece of code that can be reused in the overall codebase.',
		code: 'function square(number) { return number * number;};',
		tags: ['JavaScript', 'Web'],
	},
	{
		term: 'function expression',
		definition:
			'Similar to a declaration except it is not named, instead being saved to a variable. Cannot be used before defined in the code. Also called anonymous functions.',
		code: `const calcAge = function (birthYear) {
			return 2021 - birthYear;
		};`,
		tags: ['JavaScript'],
	},
	{
		term: 'destructuring',
		definition:
			'An ES6 feature that is a way to unpack values from an array or object into separate variables.',
		code: 'const [a,b,c] = arr;',
		tags: ['JavaScript', 'Data Structure'],
	},
];

export default function Home() {
	const [deck, setDeck] = useState([]);
	const [currentCard, setCurrentCard] = useState(0);

	useEffect(() => {
		const fetchCards = async () => {
			try {
				const res = await fetch('api/cards');
				const { cards } = await res.json();

				if (res.ok) {
					console.log('ok!');
					console.log(cards);
					setDeck(cards);
				}
			} catch (err) {}
		};
		fetchCards();
	}, []);

	const deckCount = 0;

	useEffect(() => {
		if (deck) deckCount = deck.length;
	}, [deck]);

	const prevCard = () => {
		setCurrentCard((s) => (s === 0 ? deckCount - 1 : s - 1));
	};

	const nextCard = () => {
		setCurrentCard((s) => (s === deckCount - 1 ? 0 : s + 1));
	};

	const setCard = (slide) => {
		setCurrentCard(slide);
	};

	const cardStyles = {
		transition: 'all .5s',
		ml: `-${currentCard * 100}%`,
	};

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<VStack p={4}>
				<VStack p={2}>
					<Heading>Welcome to Study Up!</Heading>
					<Text>
						A free flashcard generator that some guy made to prove that he
						could!
					</Text>
				</VStack>
				<Flex
					maxW={['full', null, '50%']}
					align='center'
					justify='center'
					p={30}
					flexDirection='column'
				>
					<Flex w='full' maxW='xl' p='relative' overflow='hidden'>
						<Flex w='full' {...cardStyles}>
							{deck &&
								deck.map((card, cid) => (
									<FlashCard
										key={`card-${cid}`}
										term={card.term}
										definition={card.definition}
										code={card.code}
										tags={card.tags}
									/>
								))}
						</Flex>
					</Flex>
					<ButtonGroup my={3} spacing={5}>
						<Button colorScheme='yellow' onClick={prevCard}>
							Previous card
						</Button>
						<Button colorScheme='yellow' onClick={nextCard}>
							Next card
						</Button>
					</ButtonGroup>
				</Flex>
			</VStack>
		</>
	);
}
